[{"id":3,"pagetitle":"Home","title":"QUBO.jl Documentation","ref":"/QUBO.jl/QUBO.jl/stable/#QUBO.jl-Documentation","content":" QUBO.jl Documentation"},{"id":4,"pagetitle":"Home","title":"Introduction","ref":"/QUBO.jl/QUBO.jl/stable/#Introduction","content":" Introduction QUBO.jl  is an all-in-one package for working with QUBO formulations in  JuMP  and interfacing with QUBO solvers. This project aggregates three complementary packages:  ToQUBO.jl ,  QUBODrivers.jl  and  QUBOTools.jl ."},{"id":5,"pagetitle":"Home","title":"QUBO?","ref":"/QUBO.jl/QUBO.jl/stable/#QUBO?","content":" QUBO? QUBO is an acronym for  Quadratic Unconstrained Binary Optimization . So every QUBO problem is comprised of: a linear or quadratic objective function no constraints binary variables We can represent such problem as follows: \\[\\begin{array}{rl}\n   \\min          & \\mathbf{x}' Q\\,\\mathbf{x} \\\\\n   \\textrm{s.t.} & \\mathbf{x} \\in \\mathbb{B}^{n}\n\\end{array}\\] QUBOs are suited for representing non-convex global optimization problems. With that said, the significant advances in computing systems and algorithms specialized for sampling QUBOs have contributed to their popularity. Some of the paradigms that stand out for running QUBOs are quantum gate-based optimization algorithms (QAOA and VQE), quantum annealers and hardware-accelerated platforms (Coherent Ising Machines and Simulated Bifurcation Machines)."},{"id":6,"pagetitle":"Home","title":"QUBO.jl  features","ref":"/QUBO.jl/QUBO.jl/stable/#QUBO.jl-features","content":" QUBO.jl  features QUBO.Jl  main features are spreaded into its three subpackages: ToQUBO.jl :  reformulate general JuMP problems into the QUBO format.  QUBODrivers.jl : define a simple interface to connect with these solvers using a  MOI -compliant API.   QUBOTools.jl :   a set of methods to work with different formats for QUBO. More features are available in the documentation."},{"id":7,"pagetitle":"Home","title":"Quick Start","ref":"/QUBO.jl/QUBO.jl/stable/#Quick-Start","content":" Quick Start"},{"id":8,"pagetitle":"Home","title":"Instalation","ref":"/QUBO.jl/QUBO.jl/stable/#Instalation","content":" Instalation julia> ]add https://github.com/psrenergy/QUBO.jl#master"},{"id":9,"pagetitle":"Home","title":"Example","ref":"/QUBO.jl/QUBO.jl/stable/#Example","content":" Example using JuMP\nusing QUBO\n\nmodel = Model(() -> ToQUBO.Optimizer(ExactSampler.Optimizer))\n\n@variable(model, x[1:3], Bin)\n@constraint(model, 0.3*x[1] + 0.5*x[2] + 1.0*x[3] <= 1.6)\n@objective(model, Max, 1.0*x[1] + 2.0*x[2] + 3.0*x[3])\n\noptimize!(model)\n\nfor i = 1:result_count(model)\n    xi = value.(x, result = i)\n    yi = objective_value(model, result = i)\n\n    println(\"f($xi) = $yi\")\nend\n QUBO.jl Packages"}]